import Outcome from './Outcome';
export interface IPlayerOpts {
    defaultRating: number;
    opponentRatingDeviations?: number[];
    opponentRatings?: number[];
    outcomes?: Outcome[];
    rating: number;
    ratingDeviation: number;
    tau: number;
    volatility: number;
}
export default class Player {
    private static readonly scalingFactor;
    private readonly tau;
    private readonly defaultRating;
    private _opponentRatingDeviations;
    private _opponentRatings;
    private _outcomes;
    private _rating;
    private _ratingDeviation;
    private _volatility;
    constructor({ defaultRating, opponentRatingDeviations, opponentRatings, outcomes, rating, ratingDeviation, tau, volatility, }: IPlayerOpts);
    static compositePlayer(players: Player[]): Player;
    readonly opponentRatingDeviations: number[];
    readonly opponentRatings: number[];
    readonly outcomes: Outcome[];
    readonly rating: number;
    readonly ratingDeviation: number;
    readonly volatility: number;
    addResult(opponent: Player, outcome: Outcome): void;
    updateRating(): void;
    private isCompatiblePlayer;
    private cleanPreviousMatches;
    private hasPlayed;
    private volatilityAlgorithm;
    private preRatingDeviation;
    private variance;
    private E;
    private g;
    private delta;
    private fFactory;
    toObject(): {
        opponentRatingDeviations: number[];
        opponentRatings: number[];
        outcomes: Outcome[];
        rating: number;
        ratingDeviation: number;
        volatility: number;
    };
    toJSON(): {
        opponentRatingDeviations: number[];
        opponentRatings: number[];
        outcomes: Outcome[];
        rating: number;
        ratingDeviation: number;
        volatility: number;
    };
}
export declare const createPlayerFactory: ({ defaultRating, defaultRatingDeviation, defaultVolatility, tau, }?: {
    defaultRating?: number;
    defaultRatingDeviation?: number;
    defaultVolatility?: number;
    tau?: number;
}) => ({ opponentRatingDeviations, opponentRatings, outcomes, rating, ratingDeviation, volatility, }?: {
    opponentRatingDeviations?: number[];
    opponentRatings?: number[];
    outcomes?: Outcome[];
    rating?: number;
    ratingDeviation?: number;
    volatility?: number;
}) => Player;
