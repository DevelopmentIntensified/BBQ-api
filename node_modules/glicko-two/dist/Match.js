"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Outcome = _interopRequireWildcard(require("./Outcome"));

var _Player = _interopRequireDefault(require("./Player"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// http://rhetoricstudios.com/downloads/AbstractingGlicko2ForTeamGames.pdf
class Match {
  constructor(a, b) {
    _defineProperty(this, "aTeam", void 0);

    _defineProperty(this, "bTeam", void 0);

    this.aTeam = Array.isArray(a) ? a : [a];
    this.bTeam = Array.isArray(b) ? b : [b];

    if (!a || !b || this.aTeam.length < 1 || this.bTeam.length < 1) {
      throw new Error('Each team must consist of at least one player');
    }
  }

  get aComposite() {
    return _Player.default.compositePlayer(this.aTeam);
  }

  get bComposite() {
    return _Player.default.compositePlayer(this.bTeam);
  }

  reportTeamAWon() {
    this.reportATeamResult(_Outcome.default.Win);
  }

  reportTeamBWon() {
    this.reportATeamResult(_Outcome.default.Loss);
  }

  reportTie() {
    this.reportATeamResult(_Outcome.default.Tie);
  }

  reportOutcome([aScore, bScore]) {
    if (typeof aScore !== 'number' || typeof bScore !== 'number' || aScore < 0 || bScore < 0) {
      throw new Error('Invalid outcome report');
    }

    if (aScore > bScore) {
      this.reportTeamAWon();
    } else if (aScore < bScore) {
      this.reportTeamBWon();
    } else if (aScore === bScore) {
      this.reportTie();
    } else {
      // IMPOSSIBLE?!
      throw new Error('Invalid outcome report');
    }
  }

  reportOutcomes(outcomes) {
    outcomes.forEach(outcome => this.reportOutcome(outcome));
  }

  updatePlayerRatings() {
    this.aTeam.forEach(player => player.updateRating());
    this.bTeam.forEach(player => player.updateRating());
  }

  reportATeamResult(outcome) {
    const aComposite = this.aComposite;
    const bComposite = this.bComposite;
    this.aTeam.forEach(player => {
      player.addResult(bComposite, outcome);
    });
    const oppositeOutcome = (0, _Outcome.negateOutcome)(outcome);
    this.bTeam.forEach(player => player.addResult(aComposite, oppositeOutcome));
  }

}

exports.default = Match;